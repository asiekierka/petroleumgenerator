/* Petroleum Generator: a Buildcraft/IndustrialCraft2 crossover mod for Minecraft.
 *
 * Version 0.4
 *
 * This software is available through the following channels:
 * http://github.com/chrisduran/petroleumgenerator
 *
 * Copyright (c) 2012  Chris Duran
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * https://github.com/chrisduran/petroleumgenerator/blob/master/LICENCE
 *
 */

package drceph.petrogen.common;

import java.util.HashMap;
import java.util.Map;

import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraftforge.liquids.LiquidContainerRegistry;
import net.minecraftforge.liquids.LiquidStack;

/**
 * This stores particulars on the valid fuels for the Magic Generator
 * It keeps track of the potential (EU/unit) and power (EU/tick) of
 * the given fuel. Fuels are tracked by itemID. 
 * 
 * @author chris
 *
 */
public class FuelPetroleumGenerator {

	/* Class */
	
	private static Map<Integer, FuelPetroleumGenerator> fuels = new HashMap<Integer, FuelPetroleumGenerator>();

	/**
	 * Given an itemId, this method will return particulars of the fuel, should the
	 * fuel be a valid Generator Fuel.
	 * @param itemId the item ID for the fuel to be queried
	 * @return the object representing the Generator Fuel, or null if not a valid fuel
	 */
	public static FuelPetroleumGenerator getFuelByItemId(int itemId) {
		return fuels.get(itemId);
	}
	
	public static boolean isValidFuel(int itemId) {
		return fuels.containsKey(itemId);
	}

	/* Instance */
	
	private LiquidStack fuel;
	private int euPerBucket;
	private int euPacketSize;
	private int guiOffset;
	
	public FuelPetroleumGenerator(LiquidStack liquidStack, int euPerBucket,
			int euPacketSize, int offset) {
		this(liquidStack.asItemStack(), euPerBucket, euPacketSize, offset);
	}

	public FuelPetroleumGenerator(Item item, int euPerBucket, int euPacketSize, int offset) {
		this(new ItemStack(item), euPerBucket, euPacketSize, offset);
	}

	public FuelPetroleumGenerator(ItemStack itemStack, int euPerBucket,
			int euPacketSize, int offset) {
		if (itemStack.getItem().hasContainerItem()) {
			fuel = LiquidContainerRegistry.getLiquidForFilledItem(itemStack);
		} else {
			fuel = new LiquidStack(itemStack.getItem(),
					LiquidContainerRegistry.BUCKET_VOLUME);
		}
		this.euPerBucket = euPerBucket;
		this.euPacketSize = euPacketSize;
		this.guiOffset = offset;
		
		PetroleumGenerator.log.info("Adding fuel "+fuel.asItemStack().getItemName() 
									+" (ID: "+fuel.itemID+") => Potential: "+euPerBucket+", Power: "+euPacketSize);
		FuelPetroleumGenerator.fuels.put(fuel.itemID, this);
	}
	
	/**
	 * @return a LiquidStack representing this fuel
	 */
	public LiquidStack getFuel() {
		return fuel;
	}

	public int getItemId() {
		return fuel.itemID;
	}
	
	/**
	 * @return the amount of EU one bucket of this fuel will generate
	 */
	public int getEuPerBucket() {
		return euPerBucket;
	}

	/**
	 * @return the amount of EU generated by the atomic LiquidStack unit
	 */
	public int getEuPerLiquidUnit() {
		return euPerBucket / LiquidContainerRegistry.BUCKET_VOLUME;
	}

	/**
	 * @return the size of the EU packet generated with this fuel
	 */
	public int getEuPacketSize() {
		return euPacketSize;
	}

	/**
	 * This is currently 5 ticks for fuel and 1 tick for oil
	 * @return the number of ticks to exhaust a fuel unit
	 */
	public int getTicksForLiquidUnit() {
		return getEuPerLiquidUnit() / euPacketSize;
	}
	
	/**
	 * Gives the offset for the correct fuel texture in the gui
	 * @return current values are 0 for oil, 1 for fuel 
	 */
	public int getGuiOffset() {
		return guiOffset;
	}
}
